#!/usr/bin/env python3
"""
Vers√£o simplificada do servi√ßo de IA para teste r√°pido
"""

import os
import asyncio
from fastapi import FastAPI
from pydantic import BaseModel
from typing import List, Dict, Any, Optional
import uvicorn

# Configura√ß√£o simples
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY", "sk-xxx-configure-sua-chave")

app = FastAPI(
    title="Direito Lux - IA Jur√≠dica (Teste)",
    description="Vers√£o simplificada para teste",
    version="1.0.0-test"
)

# Modelos de requisi√ß√£o
class LegalQueryRequest(BaseModel):
    question: str
    query_type: str = "geral"
    evaluate_response: bool = False

class LegalQueryResponse(BaseModel):
    query_id: str
    question: str
    answer: str
    query_type: str
    sources: List[Dict[str, Any]]
    processing_time: float

# Base de conhecimento simulada
MOCK_KNOWLEDGE_BASE = {
    "direitos_fundamentais": {
        "content": "Art. 5¬∫ Todos s√£o iguais perante a lei, sem distin√ß√£o de qualquer natureza, garantindo-se aos brasileiros e aos estrangeiros residentes no Pa√≠s a inviolabilidade do direito √† vida, √† liberdade, √† igualdade, √† seguran√ßa e √† propriedade.",
        "source": "Constitui√ß√£o Federal - Art. 5¬∫",
        "law_number": "Constitui√ß√£o Federal de 1988"
    },
    "responsabilidade_civil": {
        "content": "Art. 186. Aquele que, por a√ß√£o ou omiss√£o volunt√°ria, neglig√™ncia ou imprud√™ncia, violar direito e causar dano a outrem, ainda que exclusivamente moral, comete ato il√≠cito.",
        "source": "C√≥digo Civil - Art. 186",
        "law_number": "Lei n¬∫ 10.406/2002"
    },
    "justa_causa": {
        "content": "Art. 482 - Constituem justa causa para rescis√£o do contrato de trabalho pelo empregador: a) ato de improbidade; b) incontin√™ncia de conduta ou mau procedimento; c) negocia√ß√£o habitual por conta pr√≥pria...",
        "source": "CLT - Art. 482",
        "law_number": "Decreto-Lei n¬∫ 5.452/1943"
    }
}

def mock_search_knowledge(question: str) -> List[Dict[str, Any]]:
    """Busca simulada na base de conhecimento"""
    results = []
    question_lower = question.lower()
    
    for key, data in MOCK_KNOWLEDGE_BASE.items():
        if any(term in question_lower for term in key.split('_')):
            results.append({
                "id": key,
                "document": data["content"],
                "similarity_score": 0.85,
                "metadata": {
                    "title": data["source"],
                    "law_number": data["law_number"],
                    "source_type": "mock_data"
                }
            })
    
    return results[:3]  # Retorna no m√°ximo 3 resultados

def mock_generate_answer(question: str, context: str) -> str:
    """Gera√ß√£o de resposta simulada (sem OpenAI para teste)"""
    if "direitos fundamentais" in question.lower():
        return """Os direitos fundamentais s√£o direitos b√°sicos e essenciais reconhecidos e protegidos pela Constitui√ß√£o Federal brasileira. Est√£o previstos principalmente no Art. 5¬∫ da Constitui√ß√£o Federal de 1988.

Segundo o Art. 5¬∫: "Todos s√£o iguais perante a lei, sem distin√ß√£o de qualquer natureza, garantindo-se aos brasileiros e aos estrangeiros residentes no Pa√≠s a inviolabilidade do direito √† vida, √† liberdade, √† igualdade, √† seguran√ßa e √† propriedade."

Os direitos fundamentais incluem:
- Direito √† vida
- Direito √† liberdade
- Direito √† igualdade
- Direito √† seguran√ßa
- Direito √† propriedade

Estes direitos s√£o considerados cl√°usulas p√©treas e n√£o podem ser abolidos nem mesmo por emenda constitucional."""

    elif "responsabilidade civil" in question.lower():
        return """A responsabilidade civil est√° prevista no Art. 186 do C√≥digo Civil brasileiro. Segundo este artigo: "Aquele que, por a√ß√£o ou omiss√£o volunt√°ria, neglig√™ncia ou imprud√™ncia, violar direito e causar dano a outrem, ainda que exclusivamente moral, comete ato il√≠cito."

Os elementos da responsabilidade civil s√£o:
1. **Conduta**: a√ß√£o ou omiss√£o do agente
2. **Culpa ou Dolo**: neglig√™ncia, imprud√™ncia ou a√ß√£o intencional
3. **Nexo Causal**: rela√ß√£o de causa e efeito entre a conduta e o dano
4. **Dano**: preju√≠zo material ou moral causado √† v√≠tima

O objetivo da responsabilidade civil √© reparar o dano causado, restabelecendo o equil√≠brio patrimonial e moral da v√≠tima."""

    elif "justa causa" in question.lower():
        return """A justa causa trabalhista est√° prevista no Art. 482 da CLT (Consolida√ß√£o das Leis do Trabalho). As principais hip√≥teses de justa causa s√£o:

a) Ato de improbidade
b) Incontin√™ncia de conduta ou mau procedimento
c) Negocia√ß√£o habitual por conta pr√≥pria sem permiss√£o do empregador
d) Condena√ß√£o criminal transitada em julgado
e) Des√≠dia no desempenho das fun√ß√µes
f) Embriaguez habitual ou em servi√ßo
g) Viola√ß√£o de segredo da empresa
h) Ato de indisciplina ou insubordina√ß√£o
i) Abandono de emprego
j) Ato lesivo da honra ou ofensas f√≠sicas no servi√ßo
k) Ato lesivo contra empregador e superiores
l) Pr√°tica constante de jogos de azar

A justa causa permite a demiss√£o sem aviso pr√©vio e sem direito a algumas verbas rescis√≥rias."""
    
    else:
        return f"""Com base no contexto jur√≠dico dispon√≠vel, posso fornecer informa√ß√µes sobre sua consulta: "{question}".

{context}

Para uma an√°lise mais espec√≠fica, recomendo consultar um advogado especializado na √°rea ou verificar a legisla√ß√£o aplic√°vel ao seu caso concreto."""

@app.get("/health")
async def health_check():
    """Health check endpoint"""
    return {
        "service": "Direito Lux - IA Jur√≠dica (Teste)",
        "status": "healthy",
        "version": "1.0.0-test",
        "environment": "test",
        "services": {
            "mock_knowledge_base": True,
            "mock_llm": True
        }
    }

@app.post("/api/v1/rag/query", response_model=LegalQueryResponse)
async def legal_query(request: LegalQueryRequest):
    """Consulta jur√≠dica com RAG simulado"""
    import time
    start_time = time.time()
    
    # Simular ID da consulta
    query_id = f"test_query_{int(time.time())}"
    
    # Buscar na base de conhecimento simulada
    relevant_docs = mock_search_knowledge(request.question)
    
    # Preparar contexto
    context = ""
    sources = []
    
    for doc in relevant_docs:
        context += f"{doc['document']}\n\n"
        sources.append({
            "id": doc["id"],
            "title": doc["metadata"]["title"],
            "law_number": doc["metadata"]["law_number"],
            "similarity_score": doc["similarity_score"],
            "source_type": doc["metadata"]["source_type"]
        })
    
    # Gerar resposta simulada
    answer = mock_generate_answer(request.question, context)
    
    processing_time = time.time() - start_time
    
    return LegalQueryResponse(
        query_id=query_id,
        question=request.question,
        answer=answer,
        query_type=request.query_type,
        sources=sources,
        processing_time=processing_time
    )

@app.get("/api/v1/rag/stats")
async def get_rag_stats():
    """Estat√≠sticas do sistema RAG"""
    return {
        "total_documents": len(MOCK_KNOWLEDGE_BASE),
        "collection_name": "mock_legal_docs",
        "llm_provider": "mock",
        "llm_model": "mock-legal-model",
        "status": "healthy"
    }

@app.get("/api/v1/knowledge/stats")
async def get_knowledge_stats():
    """Estat√≠sticas da base de conhecimento"""
    return {
        "total_documents": len(MOCK_KNOWLEDGE_BASE),
        "collection_name": "mock_legal_docs",
        "metadata_fields": ["title", "law_number", "source_type"],
        "status": "healthy"
    }

@app.get("/docs")
async def get_docs():
    """Redirect to automatic docs"""
    from fastapi.responses import RedirectResponse
    return RedirectResponse(url="/docs")

if __name__ == "__main__":
    print("üß† Iniciando Direito Lux - IA Jur√≠dica (Modo Teste)")
    print("üìä Usando base de conhecimento simulada")
    print("üîó API dispon√≠vel em: http://localhost:9003")
    print("üìñ Documenta√ß√£o em: http://localhost:9003/docs")
    
    uvicorn.run(
        "test_service:app",
        host="0.0.0.0",
        port=9003,
        reload=True,
        log_level="info"
    )