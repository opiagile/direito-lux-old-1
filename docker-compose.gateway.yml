# Docker Compose for Module 2 - API Gateway, Health, OPA
version: '3.8'

services:
  # Kong API Gateway
  kong-database:
    image: postgres:16-alpine
    container_name: kong-postgres
    environment:
      POSTGRES_DB: kong
      POSTGRES_USER: kong
      POSTGRES_PASSWORD: kong
    volumes:
      - kong_data:/var/lib/postgresql/data
    networks:
      - direito-lux-gateway
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U kong"]
      interval: 10s
      timeout: 5s
      retries: 5

  kong-migration:
    image: kong:3.5
    container_name: kong-migration
    command: kong migrations bootstrap
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kong
      KONG_PG_DATABASE: kong
    depends_on:
      kong-database:
        condition: service_healthy
    networks:
      - direito-lux-gateway

  kong:
    image: kong:3.5
    container_name: kong-gateway
    environment:
      KONG_DATABASE: "off"
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
      KONG_DECLARATIVE_CONFIG: /opt/kong/kong-simple.yml
      KONG_PLUGINS: bundled
    volumes:
      - ./infrastructure/kong/kong-simple.yml:/opt/kong/kong-simple.yml:ro
      - ./infrastructure/kong/kong.yml:/opt/kong/kong.yml:ro
    ports:
      - "8002:8000"  # Kong proxy
      - "8446:8443"  # Kong proxy SSL
      - "8003:8001"  # Kong admin API
      - "8447:8444"  # Kong admin API SSL
    networks:
      - direito-lux-gateway
      - direito-lux-network
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Open Policy Agent
  opa:
    image: openpolicyagent/opa:0.59.0-envoy
    container_name: opa-server
    command:
      - "run"
      - "--server"
      - "--config-file=/config/opa-config.yaml"
      - "/policies"
    volumes:
      - ./infrastructure/opa/policies:/policies:ro
      - ./infrastructure/opa/config/opa-config.yaml:/config/opa-config.yaml:ro
      - ./infrastructure/opa/data:/data:ro
    ports:
      - "8181:8181"  # OPA API
      - "8282:8282"  # OPA diagnostics
    networks:
      - direito-lux-gateway
      - direito-lux-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8181/health"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Prometheus for metrics
  prometheus:
    image: prom/prometheus:v2.48.0
    container_name: prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
    volumes:
      - ./infrastructure/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - direito-lux-gateway
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Grafana for dashboards
  grafana:
    image: grafana/grafana:10.2.2
    container_name: grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=redis-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./infrastructure/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./infrastructure/grafana/dashboards:/var/lib/grafana/dashboards:ro
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    networks:
      - direito-lux-gateway
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Jaeger for distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:1.52
    container_name: jaeger
    environment:
      - COLLECTOR_ZIPKIN_HOST_PORT=:9411
      - COLLECTOR_OTLP_ENABLED=true
    ports:
      - "6831:6831/udp"  # Jaeger agent
      - "6832:6832/udp"  # Jaeger agent
      - "5778:5778"      # Serving configs
      - "16686:16686"    # Jaeger UI
      - "14268:14268"    # Jaeger collector
      - "14250:14250"    # gRPC
      - "9411:9411"      # Zipkin
      - "4317:4317"      # OTLP gRPC
      - "4318:4318"      # OTLP HTTP
    networks:
      - direito-lux-gateway
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:14269/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  kong_data:
  prometheus_data:
  grafana_data:

networks:
  direito-lux-gateway:
    driver: bridge
  direito-lux-network:
    external: true