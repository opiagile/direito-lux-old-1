# Direito Lux - CI/CD Pipeline
# Fluxo: Build → Dev → Homologação → Produção

name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

permissions:
  contents: read
  security-events: write
  actions: read
  checks: write

env:
  REGISTRY: us-central1-docker.pkg.dev
  PROJECT_ID_DEV: direito-lux-dev
  PROJECT_ID_STAGING: direito-lux-staging
  PROJECT_ID_PROD: direito-lux-prod
  REPOSITORY: direito-lux
  GO_VERSION: '1.21'
  PYTHON_VERSION: '3.11'

jobs:
  # ========== CI: Build & Test ==========
  test-go:
    name: Test Go Services
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
      
      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      
      - name: Run tests
        run: |
          go test -v -race -coverprofile=coverage.out ./...
          go tool cover -html=coverage.out -o coverage.html
      
      - name: Upload coverage
        uses: actions/upload-artifact@v4
        with:
          name: go-coverage
          path: coverage.html

  test-python:
    name: Test Python Services
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      
      - name: Install dependencies
        run: |
          cd services/ia-juridica
          # Install test dependencies only
          pip install fastapi uvicorn pytest pytest-cov pytest-asyncio httpx
      
      - name: Run tests
        run: |
          cd services/ia-juridica
          pytest tests/ --cov-report=html
      
      - name: Upload coverage
        uses: actions/upload-artifact@v4
        with:
          name: python-coverage
          path: services/ia-juridica/htmlcov/

  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      actions: read
    steps:
      - uses: actions/checkout@v4
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: Archive Trivy scan results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: trivy-results
          path: trivy-results.sarif

  # ========== Build Docker Images ==========
  build-images:
    name: Build Docker Images
    needs: [test-go, test-python, security-scan]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && vars.ENABLE_GCP_DEPLOY == 'true'
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        if: vars.ENABLE_GCP_DEPLOY == 'true'
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY_DEV }}'
          create_credentials_file: true
          export_environment_variables: true
      
      - name: Configure Docker for Artifact Registry
        if: vars.ENABLE_GCP_DEPLOY == 'true'
        run: |
          gcloud auth configure-docker us-central1-docker.pkg.dev
          gcloud config set project ${{ env.PROJECT_ID_DEV }}
      
      - name: Build and push image
        if: vars.ENABLE_GCP_DEPLOY == 'true'
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.PROJECT_ID_DEV }}/${{ env.REPOSITORY }}/direito-lux:${{ github.sha }}
            ${{ env.REGISTRY }}/${{ env.PROJECT_ID_DEV }}/${{ env.REPOSITORY }}/direito-lux:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # ========== Build Success Notification ==========
  build-success:
    name: Build Success Notification
    needs: build-images
    runs-on: ubuntu-latest
    if: vars.ENABLE_GCP_DEPLOY == 'true' && vars.ENABLE_GKE_DEPLOY != 'true'
    
    steps:
      - name: Notify build success
        run: |
          echo "✅ Docker image built and pushed successfully!"
          echo "Image: ${{ env.REGISTRY }}/${{ env.PROJECT_ID_DEV }}/${{ env.REPOSITORY }}/direito-lux:${{ github.sha }}"
          echo "Latest: ${{ env.REGISTRY }}/${{ env.PROJECT_ID_DEV }}/${{ env.REPOSITORY }}/direito-lux:latest"
          echo ""
          echo "📋 Next steps:"
          echo "1. Set ENABLE_GKE_DEPLOY=true in repository variables to enable Kubernetes deployment"
          echo "2. Create GKE clusters using terraform or gcloud CLI"
          echo "3. Configure Helm charts for deployment"

  # ========== Deploy to DEV ==========
  deploy-dev:
    name: Deploy to Development
    needs: build-images
    runs-on: ubuntu-latest
    if: vars.ENABLE_GCP_DEPLOY == 'true' && vars.ENABLE_GKE_DEPLOY == 'true'
    environment: development
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY_DEV }}'
          create_credentials_file: true
          export_environment_variables: true
      
      - name: Get GKE credentials
        uses: google-github-actions/get-gke-credentials@v1
        with:
          cluster_name: direito-lux-dev
          location: us-central1-a
      
      - name: Deploy PostgreSQL for development
        run: |
          # Deploy PostgreSQL first
          kubectl apply -f k8s/postgres-dev.yaml || true
          
          # Wait for PostgreSQL to be ready
          kubectl rollout status deployment/postgres --timeout=60s || true
          
      - name: Deploy with kubectl
        run: |
          # Create a simple deployment
          cat <<EOF | kubectl apply -f -
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: direito-lux
            namespace: default
          spec:
            replicas: 1
            selector:
              matchLabels:
                app: direito-lux
            template:
              metadata:
                labels:
                  app: direito-lux
              spec:
                containers:
                - name: direito-lux
                  image: ${{ env.REGISTRY }}/${{ env.PROJECT_ID_DEV }}/${{ env.REPOSITORY }}/direito-lux:${{ github.sha }}
                  ports:
                  - containerPort: 8080
                  env:
                  - name: ENVIRONMENT
                    value: "dev"
                  - name: DEMO_MODE
                    value: "false"
                  - name: DIREITO_LUX_SERVER_PORT
                    value: "8080"
                  - name: DIREITO_LUX_DATABASE_HOST
                    value: "postgres"
                  - name: DIREITO_LUX_DATABASE_PORT
                    value: "5432"
                  - name: DIREITO_LUX_DATABASE_USER
                    value: "postgres"
                  - name: DIREITO_LUX_DATABASE_PASSWORD
                    value: "postgres123"
                  - name: DIREITO_LUX_DATABASE_DBNAME
                    value: "direito_lux"
                  - name: DIREITO_LUX_DATABASE_SSLMODE
                    value: "disable"
                  resources:
                    requests:
                      memory: "128Mi"
                      cpu: "100m"
                    limits:
                      memory: "256Mi"
                      cpu: "200m"
          ---
          apiVersion: v1
          kind: Service
          metadata:
            name: direito-lux
            namespace: default
          spec:
            selector:
              app: direito-lux
            ports:
            - port: 80
              targetPort: 8080
            type: LoadBalancer
          EOF
      
      - name: Debug and test deployment
        run: |
          # Show all resources
          echo "=== All pods ==="
          kubectl get pods -o wide
          
          echo "=== All services ==="
          kubectl get services
          
          echo "=== Describe postgres pod ==="
          kubectl describe pod -l app=postgres | tail -20
          
          echo "=== Describe direito-lux pod ==="
          kubectl describe pod -l app=direito-lux | tail -20
          
          echo "=== Direito-lux logs ==="
          kubectl logs -l app=direito-lux --tail=10 || echo "No logs yet"
          
          # Wait for deployment with shorter timeout
          echo "=== Waiting for deployment ==="
          kubectl rollout status deployment/direito-lux --timeout=120s || echo "Timeout, but continuing..."
      
      - name: Display deployment status
        if: always()
        run: |
          echo "Deployment status: ${{ job.status }}"
          kubectl get pods,services -l app=direito-lux || true

  # ========== Deploy to HOMOLOGAÇÃO ==========
  deploy-staging:
    name: Deploy to Homologação
    needs: [build-images]
    runs-on: ubuntu-latest
    if: vars.ENABLE_GCP_DEPLOY == 'true' && vars.ENABLE_GKE_DEPLOY == 'true'
    environment:
      name: staging
      url: https://homolog.direito-lux.com.br
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        if: vars.ENABLE_GCP_DEPLOY == 'true'
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY_STAGING }}'
          create_credentials_file: true
          export_environment_variables: true
      
      - name: Get GKE credentials
        uses: google-github-actions/get-gke-credentials@v1
        if: vars.ENABLE_GCP_DEPLOY == 'true'
        with:
          cluster_name: direito-lux-staging
          location: us-central1
      
      - name: Deploy Cloud SQL Proxy (if needed)
        if: vars.ENABLE_GCP_DEPLOY == 'true'
        run: |
          # Deploy Cloud SQL Proxy for secure connection
          kubectl apply -f - <<EOF
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: cloud-sql-proxy
            namespace: default
          spec:
            replicas: 1
            selector:
              matchLabels:
                app: cloud-sql-proxy
            template:
              metadata:
                labels:
                  app: cloud-sql-proxy
              spec:
                serviceAccountName: workload-identity-sa
                containers:
                - name: cloud-sql-proxy
                  image: gcr.io/cloudsql-docker/gce-proxy:1.35.4
                  command:
                    - "/cloud_sql_proxy"
                    - "-instances=${{ env.PROJECT_ID_STAGING }}:us-central1:staging-postgres=tcp:0.0.0.0:5432"
                  ports:
                  - containerPort: 5432
                  resources:
                    requests:
                      memory: "64Mi"
                      cpu: "50m"
          ---
          apiVersion: v1
          kind: Service
          metadata:
            name: cloud-sql-proxy
            namespace: default
          spec:
            selector:
              app: cloud-sql-proxy
            ports:
            - port: 5432
              targetPort: 5432
          EOF

      - name: Deploy with Helm
        if: vars.ENABLE_GCP_DEPLOY == 'true'
        run: |
          helm upgrade --install direito-lux ./helm/direito-lux \
            --namespace=default \
            --set environment=staging \
            --set image.tag=${{ github.sha }} \
            --set database.host=cloud-sql-proxy \
            --set database.user=direito_lux_app \
            --set database.password="${{ secrets.STAGING_DB_PASSWORD }}" \
            --set database.name=direito_lux \
            --values ./helm/direito-lux/values-staging.yaml \
            --wait
      
      - name: Run integration tests
        run: |
          cd tests/integration
          npm install
          npm run test:staging
      
      - name: Security validation
        run: |
          # OWASP ZAP scan
          docker run -t owasp/zap2docker-stable zap-baseline.py \
            -t https://homolog.direito-lux.com.br -r zap-report.html
      
      - name: Upload test results
        uses: actions/upload-artifact@v3
        with:
          name: staging-test-results
          path: |
            tests/integration/results/
            zap-report.html

  # ========== Deploy to PRODUCTION ==========
  deploy-production:
    name: Deploy to Production
    needs: deploy-staging
    runs-on: ubuntu-latest
    if: vars.ENABLE_GCP_DEPLOY == 'true' && vars.ENABLE_GKE_DEPLOY == 'true'
    environment:
      name: production
      url: https://app.direito-lux.com.br
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        if: vars.ENABLE_GCP_DEPLOY == 'true'
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY_PROD }}'
          create_credentials_file: true
          export_environment_variables: true
      
      - name: Get GKE credentials
        uses: google-github-actions/get-gke-credentials@v1
        if: vars.ENABLE_GCP_DEPLOY == 'true'
        with:
          cluster_name: direito-lux-prod
          location: us-central1
      
      - name: Create release tag
        if: vars.ENABLE_GCP_DEPLOY == 'true'
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git tag -a v$(date +%Y%m%d-%H%M%S) -m "Production release ${{ github.sha }}"
          git push origin --tags
      
      - name: Blue-Green Deployment
        if: vars.ENABLE_GCP_DEPLOY == 'true'
        run: |
          # Deploy to green environment
          helm upgrade --install direito-lux-green ./helm/direito-lux \
            --namespace=production \
            --set environment=prod \
            --set deployment.strategy=green \
            --set image.tag=${{ github.sha }} \
            --values ./helm/direito-lux/values-prod.yaml \
            --wait
          
          # Run health checks
          kubectl run health-check --image=curlimages/curl --rm -i --restart=Never -- \
            curl -f http://direito-lux-gateway-green/health || exit 1
          
          # Switch traffic
          kubectl patch service direito-lux-gateway \
            -p '{"spec":{"selector":{"deployment":"green"}}}'
          
          # Wait and verify
          sleep 30
          
          # Remove blue deployment
          helm uninstall direito-lux-blue --namespace=production || true
      
      - name: Database migrations
        run: |
          kubectl run migrations --image=${{ env.REGISTRY }}/${{ env.PROJECT_ID_PROD }}/direito-lux:${{ github.sha }} \
            --rm -i --restart=Never \
            --env="DB_CONNECTION=${{ secrets.PROD_DB_CONNECTION }}"
      
      - name: Notify team
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: |
            🚀 Production deployment completed!
            Version: ${{ github.sha }}
            URL: https://app.direito-lux.com.br
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}

  # ========== Rollback (Manual Trigger) ==========
  rollback:
    name: Rollback Production
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    environment: production-rollback
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Rollback deployment
        run: |
          helm rollback direito-lux --namespace=production
      
      - name: Notify team
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: '⚠️ Production rollback executed!'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}